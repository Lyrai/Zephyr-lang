//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from testLexer.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class testLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		STRING_LITERAL=1, WS=2, CLASS=3, END=4, PRINT=5, RETURN=6, IF=7, ELSE=8, 
		WHILE=9, FOR=10, GET=11, SET=12, FN=13, LET=14, TRUE=15, FALSE=16, ID=17, 
		ARROW=18, SEMICOLON=19, COLON=20, COMMA=21, DOT=22, LBRACE=23, RBRACE=24, 
		ASSIGN=25, EQUAL=26, NOT_EQUAL=27, GREATER_EQUAL=28, GREATER=29, LESS_EQUAL=30, 
		LESS=31, PLUS=32, MINUS=33, DIVIDE=34, MULTIPLY=35, NOT=36, LPAR=37, RPAR=38, 
		INT=39, FLOAT=40, DOUBLE_QUOTE=41;
	public const int
		StringLiteral=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "StringLiteral"
	};

	public static readonly string[] ruleNames = {
		"WS", "CLASS", "END", "PRINT", "RETURN", "IF", "ELSE", "WHILE", "FOR", 
		"GET", "SET", "FN", "LET", "TRUE", "FALSE", "ID", "ARROW", "SEMICOLON", 
		"COLON", "COMMA", "DOT", "LBRACE", "RBRACE", "ASSIGN", "EQUAL", "NOT_EQUAL", 
		"GREATER_EQUAL", "GREATER", "LESS_EQUAL", "LESS", "PLUS", "MINUS", "DIVIDE", 
		"MULTIPLY", "NOT", "LPAR", "RPAR", "DOUBLE_QUOTE", "INT", "FLOAT", "CLOSING_QUOTE", 
		"ANY"
	};


	public testLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public testLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'class'", "'end'", "'print'", "'return'", "'if'", "'else'", 
		"'while'", "'for'", "'get'", "'set'", "'fn'", "'let'", "'true'", "'false'", 
		null, "'->'", "';'", "':'", "','", "'.'", "'{'", "'}'", "'='", "'=='", 
		"'!='", "'>='", "'>'", "'<='", "'<'", "'+'", "'-'", "'/'", "'*'", "'!'", 
		"'('", "')'", null, null, "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "STRING_LITERAL", "WS", "CLASS", "END", "PRINT", "RETURN", "IF", 
		"ELSE", "WHILE", "FOR", "GET", "SET", "FN", "LET", "TRUE", "FALSE", "ID", 
		"ARROW", "SEMICOLON", "COLON", "COMMA", "DOT", "LBRACE", "RBRACE", "ASSIGN", 
		"EQUAL", "NOT_EQUAL", "GREATER_EQUAL", "GREATER", "LESS_EQUAL", "LESS", 
		"PLUS", "MINUS", "DIVIDE", "MULTIPLY", "NOT", "LPAR", "RPAR", "INT", "FLOAT", 
		"DOUBLE_QUOTE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "testLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static testLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,41,241,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
		6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
		2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,
		2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,
		2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,
		2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
		1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,
		3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,
		1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,
		1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,
		1,14,1,14,1,14,1,14,1,14,1,15,1,15,5,15,160,8,15,10,15,12,15,163,9,15,
		1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,
		1,22,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,
		1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,
		1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,4,38,218,8,38,11,
		38,12,38,219,1,39,4,39,223,8,39,11,39,12,39,224,1,39,1,39,4,39,229,8,39,
		11,39,12,39,230,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,0,0,42,2,
		2,4,3,6,4,8,5,10,6,12,7,14,8,16,9,18,10,20,11,22,12,24,13,26,14,28,15,
		30,16,32,17,34,18,36,19,38,20,40,21,42,22,44,23,46,24,48,25,50,26,52,27,
		54,28,56,29,58,30,60,31,62,32,64,33,66,34,68,35,70,36,72,37,74,38,76,41,
		78,39,80,40,82,0,84,0,2,0,1,4,3,0,9,10,13,13,32,32,3,0,65,90,95,95,97,
		122,4,0,49,57,65,90,95,95,97,122,1,0,48,57,243,0,2,1,0,0,0,0,4,1,0,0,0,
		0,6,1,0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,1,
		0,0,0,0,18,1,0,0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,26,1,0,0,0,
		0,28,1,0,0,0,0,30,1,0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,0,36,1,0,0,0,0,38,
		1,0,0,0,0,40,1,0,0,0,0,42,1,0,0,0,0,44,1,0,0,0,0,46,1,0,0,0,0,48,1,0,0,
		0,0,50,1,0,0,0,0,52,1,0,0,0,0,54,1,0,0,0,0,56,1,0,0,0,0,58,1,0,0,0,0,60,
		1,0,0,0,0,62,1,0,0,0,0,64,1,0,0,0,0,66,1,0,0,0,0,68,1,0,0,0,0,70,1,0,0,
		0,0,72,1,0,0,0,0,74,1,0,0,0,0,76,1,0,0,0,0,78,1,0,0,0,0,80,1,0,0,0,1,82,
		1,0,0,0,1,84,1,0,0,0,2,86,1,0,0,0,4,90,1,0,0,0,6,96,1,0,0,0,8,100,1,0,
		0,0,10,106,1,0,0,0,12,113,1,0,0,0,14,116,1,0,0,0,16,121,1,0,0,0,18,127,
		1,0,0,0,20,131,1,0,0,0,22,135,1,0,0,0,24,139,1,0,0,0,26,142,1,0,0,0,28,
		146,1,0,0,0,30,151,1,0,0,0,32,157,1,0,0,0,34,164,1,0,0,0,36,167,1,0,0,
		0,38,169,1,0,0,0,40,171,1,0,0,0,42,173,1,0,0,0,44,175,1,0,0,0,46,177,1,
		0,0,0,48,179,1,0,0,0,50,181,1,0,0,0,52,184,1,0,0,0,54,187,1,0,0,0,56,190,
		1,0,0,0,58,192,1,0,0,0,60,195,1,0,0,0,62,197,1,0,0,0,64,199,1,0,0,0,66,
		201,1,0,0,0,68,203,1,0,0,0,70,205,1,0,0,0,72,207,1,0,0,0,74,209,1,0,0,
		0,76,211,1,0,0,0,78,217,1,0,0,0,80,222,1,0,0,0,82,232,1,0,0,0,84,237,1,
		0,0,0,86,87,7,0,0,0,87,88,1,0,0,0,88,89,6,0,0,0,89,3,1,0,0,0,90,91,5,99,
		0,0,91,92,5,108,0,0,92,93,5,97,0,0,93,94,5,115,0,0,94,95,5,115,0,0,95,
		5,1,0,0,0,96,97,5,101,0,0,97,98,5,110,0,0,98,99,5,100,0,0,99,7,1,0,0,0,
		100,101,5,112,0,0,101,102,5,114,0,0,102,103,5,105,0,0,103,104,5,110,0,
		0,104,105,5,116,0,0,105,9,1,0,0,0,106,107,5,114,0,0,107,108,5,101,0,0,
		108,109,5,116,0,0,109,110,5,117,0,0,110,111,5,114,0,0,111,112,5,110,0,
		0,112,11,1,0,0,0,113,114,5,105,0,0,114,115,5,102,0,0,115,13,1,0,0,0,116,
		117,5,101,0,0,117,118,5,108,0,0,118,119,5,115,0,0,119,120,5,101,0,0,120,
		15,1,0,0,0,121,122,5,119,0,0,122,123,5,104,0,0,123,124,5,105,0,0,124,125,
		5,108,0,0,125,126,5,101,0,0,126,17,1,0,0,0,127,128,5,102,0,0,128,129,5,
		111,0,0,129,130,5,114,0,0,130,19,1,0,0,0,131,132,5,103,0,0,132,133,5,101,
		0,0,133,134,5,116,0,0,134,21,1,0,0,0,135,136,5,115,0,0,136,137,5,101,0,
		0,137,138,5,116,0,0,138,23,1,0,0,0,139,140,5,102,0,0,140,141,5,110,0,0,
		141,25,1,0,0,0,142,143,5,108,0,0,143,144,5,101,0,0,144,145,5,116,0,0,145,
		27,1,0,0,0,146,147,5,116,0,0,147,148,5,114,0,0,148,149,5,117,0,0,149,150,
		5,101,0,0,150,29,1,0,0,0,151,152,5,102,0,0,152,153,5,97,0,0,153,154,5,
		108,0,0,154,155,5,115,0,0,155,156,5,101,0,0,156,31,1,0,0,0,157,161,7,1,
		0,0,158,160,7,2,0,0,159,158,1,0,0,0,160,163,1,0,0,0,161,159,1,0,0,0,161,
		162,1,0,0,0,162,33,1,0,0,0,163,161,1,0,0,0,164,165,5,45,0,0,165,166,5,
		62,0,0,166,35,1,0,0,0,167,168,5,59,0,0,168,37,1,0,0,0,169,170,5,58,0,0,
		170,39,1,0,0,0,171,172,5,44,0,0,172,41,1,0,0,0,173,174,5,46,0,0,174,43,
		1,0,0,0,175,176,5,123,0,0,176,45,1,0,0,0,177,178,5,125,0,0,178,47,1,0,
		0,0,179,180,5,61,0,0,180,49,1,0,0,0,181,182,5,61,0,0,182,183,5,61,0,0,
		183,51,1,0,0,0,184,185,5,33,0,0,185,186,5,61,0,0,186,53,1,0,0,0,187,188,
		5,62,0,0,188,189,5,61,0,0,189,55,1,0,0,0,190,191,5,62,0,0,191,57,1,0,0,
		0,192,193,5,60,0,0,193,194,5,61,0,0,194,59,1,0,0,0,195,196,5,60,0,0,196,
		61,1,0,0,0,197,198,5,43,0,0,198,63,1,0,0,0,199,200,5,45,0,0,200,65,1,0,
		0,0,201,202,5,47,0,0,202,67,1,0,0,0,203,204,5,42,0,0,204,69,1,0,0,0,205,
		206,5,33,0,0,206,71,1,0,0,0,207,208,5,40,0,0,208,73,1,0,0,0,209,210,5,
		41,0,0,210,75,1,0,0,0,211,212,5,34,0,0,212,213,1,0,0,0,213,214,6,37,1,
		0,214,215,6,37,2,0,215,77,1,0,0,0,216,218,7,3,0,0,217,216,1,0,0,0,218,
		219,1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,79,1,0,0,0,221,223,7,3,
		0,0,222,221,1,0,0,0,223,224,1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,
		226,1,0,0,0,226,228,3,42,20,0,227,229,7,3,0,0,228,227,1,0,0,0,229,230,
		1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,81,1,0,0,0,232,233,5,34,0,
		0,233,234,1,0,0,0,234,235,6,40,3,0,235,236,6,40,4,0,236,83,1,0,0,0,237,
		238,9,0,0,0,238,239,1,0,0,0,239,240,6,41,1,0,240,85,1,0,0,0,6,0,1,161,
		219,224,230,5,6,0,0,3,0,0,2,1,0,7,1,0,2,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
