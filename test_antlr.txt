class BaseClass
    name: string
    
    fn Name() -> string
        return this.name
    end
end

class DerivedClass < BaseClass
    ff: DerivedClass
    test: string
    fn Get() -> string
        print this
        return this.str
    end
        
    fn AddString(s: string) -> DerivedClass
        this.str = this.str + s
        return this
    end
    
    fn init()
        this.str = ""
    end
end

let ss: DerivedClass = DerivedClass()
ss.AddString("test string to add")
ss.name = "test"
print ss.Name()
print ss.str
ss.str = "abc"
print ss.str
double s
    
fn fib(n: int) -> int
    if n <= 1
        return 0
    
    if n == 2
        return 1
        
    if n == 3
        return 1
    return fib(n - 1) + fib(n - 2)
end
    
fn sum() -> function
    fn ss(a: int) -> int
        return a + 5
    end
    return ss
end

fn printFunc(a: function)
    print a(555)
end

print "fib(10) = " + fib(10)

let b: function = sum()
print b
printFunc(b)