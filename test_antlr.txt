class BaseClass
    name: string
    
    fn Name! -> string
        return this.name
    end
end

class DerivedClass < BaseClass
    ff: DerivedClass
    test: string
    fn Get! -> string
        print this
        return this.test
    end
        
    fn AddString: s: string -> DerivedClass
        this.test = this.test + s
        return this
    end
    
    fn init!
        this.test = ""
    end
end

let ss = DerivedClass!
ss.AddString: "test string to add"
ss.name = "test"
print ss.Name!
print ss.test
let s: double
    
fn fib: n: int -> int
    if n <= 1
        return 0
    
    if n == 2
        return 1
        
    if n == 3
        return 1
    return fib: n - 1; + fib: n - 2
end

print "fib: 10 = " + 10.fib!

fn printMany: a: int, b: string, c: double
    print a
    print b
    print c
end

let c = -5 * (2 + 7)
let d = "string"
print c + d 
printMany: 4, "many", 5.5