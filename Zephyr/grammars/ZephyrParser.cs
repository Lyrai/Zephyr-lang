//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ZephyrParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class ZephyrParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		STRING_LITERAL=1, WS=2, CLASS=3, END=4, PRINT=5, RETURN=6, IF=7, ELSE=8, 
		WHILE=9, FOR=10, GET=11, SET=12, FN=13, LET=14, TRUE=15, FALSE=16, USE=17, 
		ID=18, ARROW=19, SEMICOLON=20, COLON=21, COMMA=22, DOT=23, LBRACE=24, 
		RBRACE=25, ASSIGN=26, EQUAL=27, NOT_EQUAL=28, GREATER_EQUAL=29, GREATER=30, 
		LESS_EQUAL=31, LESS=32, PLUS=33, MINUS=34, DIVIDE=35, MULTIPLY=36, NOT=37, 
		LPAR=38, RPAR=39, INT=40, FLOAT=41, LBRACKET=42, RBRACKET=43, PIPE=44, 
		DOUBLE_QUOTE=45;
	public const int
		RULE_program = 0, RULE_statementList = 1, RULE_statement = 2, RULE_decl = 3, 
		RULE_classBodyDecl = 4, RULE_typedVarDecl = 5, RULE_optionallyTypedVarDecl = 6, 
		RULE_useStmt = 7, RULE_namespace = 8, RULE_classDecl = 9, RULE_classBody = 10, 
		RULE_printStmt = 11, RULE_returnStmt = 12, RULE_compound = 13, RULE_ifStmt = 14, 
		RULE_whileStmt = 15, RULE_forStmt = 16, RULE_funcDecl = 17, RULE_funcParameters = 18, 
		RULE_funcArguments = 19, RULE_varDecl = 20, RULE_assignExpr = 21, RULE_equality = 22, 
		RULE_arrayInitializer = 23, RULE_arrayType = 24, RULE_lambda = 25, RULE_type = 26, 
		RULE_factor = 27, RULE_call = 28, RULE_primary = 29, RULE_literal = 30;
	public static readonly string[] ruleNames = {
		"program", "statementList", "statement", "decl", "classBodyDecl", "typedVarDecl", 
		"optionallyTypedVarDecl", "useStmt", "namespace", "classDecl", "classBody", 
		"printStmt", "returnStmt", "compound", "ifStmt", "whileStmt", "forStmt", 
		"funcDecl", "funcParameters", "funcArguments", "varDecl", "assignExpr", 
		"equality", "arrayInitializer", "arrayType", "lambda", "type", "factor", 
		"call", "primary", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'class'", "'end'", "'print'", "'return'", "'if'", "'else'", 
		"'while'", "'for'", "'get'", "'set'", "'fn'", "'let'", "'true'", "'false'", 
		"'use'", null, "'->'", "';'", "':'", "','", "'.'", "'{'", "'}'", "'='", 
		"'=='", "'!='", "'>='", "'>'", "'<='", "'<'", "'+'", "'-'", "'/'", "'*'", 
		"'!'", "'('", "')'", null, null, "'['", "']'", "'|'", "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "STRING_LITERAL", "WS", "CLASS", "END", "PRINT", "RETURN", "IF", 
		"ELSE", "WHILE", "FOR", "GET", "SET", "FN", "LET", "TRUE", "FALSE", "USE", 
		"ID", "ARROW", "SEMICOLON", "COLON", "COMMA", "DOT", "LBRACE", "RBRACE", 
		"ASSIGN", "EQUAL", "NOT_EQUAL", "GREATER_EQUAL", "GREATER", "LESS_EQUAL", 
		"LESS", "PLUS", "MINUS", "DIVIDE", "MULTIPLY", "NOT", "LPAR", "RPAR", 
		"INT", "FLOAT", "LBRACKET", "RBRACKET", "PIPE", "DOUBLE_QUOTE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ZephyrParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ZephyrParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ZephyrParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ZephyrParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ZephyrParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			statementList();
			State = 63;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(ZephyrParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(ZephyrParser.SEMICOLON, i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 2, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 8134685353706L) != 0) {
				{
				{
				State = 65;
				statement();
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 66;
					Match(SEMICOLON);
					}
				}

				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext decl() {
			return GetRuleContext<DeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundContext compound() {
			return GetRuleContext<CompoundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStmtContext whileStmt() {
			return GetRuleContext<WhileStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStmtContext forStmt() {
			return GetRuleContext<ForStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignExprContext assignExpr() {
			return GetRuleContext<AssignExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseStmtContext useStmt() {
			return GetRuleContext<UseStmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 74;
				decl();
				}
				break;
			case 2:
				{
				State = 75;
				printStmt();
				}
				break;
			case 3:
				{
				State = 76;
				returnStmt();
				}
				break;
			case 4:
				{
				State = 77;
				compound();
				}
				break;
			case 5:
				{
				State = 78;
				ifStmt();
				}
				break;
			case 6:
				{
				State = 79;
				whileStmt();
				}
				break;
			case 7:
				{
				State = 80;
				forStmt();
				}
				break;
			case 8:
				{
				State = 81;
				assignExpr();
				}
				break;
			case 9:
				{
				State = 82;
				useStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl() {
			return GetRuleContext<ClassDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext funcDecl() {
			return GetRuleContext<FuncDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public DeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclContext decl() {
		DeclContext _localctx = new DeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLASS:
				{
				State = 85;
				classDecl();
				}
				break;
			case FN:
				{
				State = 86;
				funcDecl();
				}
				break;
			case LET:
				{
				State = 87;
				varDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext funcDecl() {
			return GetRuleContext<FuncDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedVarDeclContext typedVarDecl() {
			return GetRuleContext<TypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl() {
			return GetRuleContext<ClassDeclContext>(0);
		}
		public ClassBodyDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBodyDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterClassBodyDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitClassBodyDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBodyDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyDeclContext classBodyDecl() {
		ClassBodyDeclContext _localctx = new ClassBodyDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_classBodyDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FN:
				{
				State = 90;
				funcDecl();
				}
				break;
			case ID:
				{
				State = 91;
				typedVarDecl();
				}
				break;
			case CLASS:
				{
				State = 92;
				classDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedVarDeclContext : ParserRuleContext {
		public IToken Name;
		public TypeContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ZephyrParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterTypedVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitTypedVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedVarDeclContext typedVarDecl() {
		TypedVarDeclContext _localctx = new TypedVarDeclContext(Context, State);
		EnterRule(_localctx, 10, RULE_typedVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			_localctx.Name = Match(ID);
			State = 96;
			_localctx.Type = type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionallyTypedVarDeclContext : ParserRuleContext {
		public IToken Name;
		public TypeContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ZephyrParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public OptionallyTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionallyTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterOptionallyTypedVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitOptionallyTypedVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionallyTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionallyTypedVarDeclContext optionallyTypedVarDecl() {
		OptionallyTypedVarDeclContext _localctx = new OptionallyTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_optionallyTypedVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			_localctx.Name = Match(ID);
			State = 100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 99;
				_localctx.Type = type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseStmtContext : ParserRuleContext {
		public NamespaceContext Namespace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(ZephyrParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		public UseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterUseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitUseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseStmtContext useStmt() {
		UseStmtContext _localctx = new UseStmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_useStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			Match(USE);
			State = 103;
			_localctx.Namespace = @namespace();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(ZephyrParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(ZephyrParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(ZephyrParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(ZephyrParser.DOT, i);
		}
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 16, RULE_namespace);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(ID);
			State = 110;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 106;
					Match(DOT);
					State = 107;
					Match(ID);
					}
					} 
				}
				State = 112;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		public IToken Name;
		public IToken Base;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(ZephyrParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ZephyrParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(ZephyrParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(ZephyrParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(ZephyrParser.LESS, 0); }
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 18, RULE_classDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(CLASS);
			State = 114;
			_localctx.Name = Match(ID);
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LESS) {
				{
				State = 115;
				Match(LESS);
				State = 116;
				_localctx.Base = Match(ID);
				}
			}

			State = 119;
			classBody();
			State = 120;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyDeclContext[] classBodyDecl() {
			return GetRuleContexts<ClassBodyDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyDeclContext classBodyDecl(int i) {
			return GetRuleContext<ClassBodyDeclContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 20, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 270344L) != 0) {
				{
				{
				State = 122;
				classBodyDecl();
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(ZephyrParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_printStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(PRINT);
			State = 129;
			equality(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ZephyrParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 24, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(RETURN);
			State = 133;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 132;
				equality(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ZephyrParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ZephyrParser.RBRACE, 0); }
		public CompoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterCompound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitCompound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundContext compound() {
		CompoundContext _localctx = new CompoundContext(Context, State);
		EnterRule(_localctx, 26, RULE_compound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(LBRACE);
			State = 136;
			statementList();
			State = 137;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public EqualityContext Condition;
		public StatementContext ThenBranch;
		public StatementContext ElseBranch;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ZephyrParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ZephyrParser.ELSE, 0); }
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_ifStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			Match(IF);
			State = 140;
			_localctx.Condition = equality(0);
			State = 141;
			_localctx.ThenBranch = statement();
			State = 144;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 142;
				Match(ELSE);
				State = 143;
				_localctx.ElseBranch = statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStmtContext : ParserRuleContext {
		public EqualityContext Condition;
		public StatementContext Body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(ZephyrParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterWhileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitWhileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStmtContext whileStmt() {
		WhileStmtContext _localctx = new WhileStmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_whileStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(WHILE);
			State = 147;
			_localctx.Condition = equality(0);
			State = 148;
			_localctx.Body = statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStmtContext : ParserRuleContext {
		public VarDeclContext Initializer;
		public EqualityContext Condition;
		public AssignExprContext PostAction;
		public StatementContext Body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(ZephyrParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ZephyrParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ZephyrParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignExprContext assignExpr() {
			return GetRuleContext<AssignExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterForStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitForStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStmtContext forStmt() {
		ForStmtContext _localctx = new ForStmtContext(Context, State);
		EnterRule(_localctx, 32, RULE_forStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(FOR);
			State = 151;
			_localctx.Initializer = varDecl();
			State = 152;
			Match(COMMA);
			State = 153;
			_localctx.Condition = equality(0);
			State = 154;
			Match(COMMA);
			State = 155;
			_localctx.PostAction = assignExpr();
			State = 156;
			_localctx.Body = statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclContext : ParserRuleContext {
		public IToken Name;
		public TypeContext Type;
		public StatementContext Body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FN() { return GetToken(ZephyrParser.FN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ZephyrParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ZephyrParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncParametersContext funcParameters() {
			return GetRuleContext<FuncParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(ZephyrParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(ZephyrParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FuncDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclContext funcDecl() {
		FuncDeclContext _localctx = new FuncDeclContext(Context, State);
		EnterRule(_localctx, 34, RULE_funcDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(FN);
			State = 159;
			_localctx.Name = Match(ID);
			State = 163;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				State = 160;
				Match(COLON);
				State = 161;
				funcParameters();
				}
				break;
			case NOT:
				{
				State = 162;
				Match(NOT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARROW) {
				{
				State = 165;
				Match(ARROW);
				State = 166;
				_localctx.Type = type();
				}
			}

			State = 169;
			_localctx.Body = statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncParametersContext : ParserRuleContext {
		public TypedVarDeclContext _typedVarDecl;
		public IList<TypedVarDeclContext> _Parameters = new List<TypedVarDeclContext>();
		public IList<TypedVarDeclContext> _Paramters = new List<TypedVarDeclContext>();
		[System.Diagnostics.DebuggerNonUserCode] public TypedVarDeclContext[] typedVarDecl() {
			return GetRuleContexts<TypedVarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedVarDeclContext typedVarDecl(int i) {
			return GetRuleContext<TypedVarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ZephyrParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ZephyrParser.COMMA, i);
		}
		public FuncParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterFuncParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitFuncParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncParametersContext funcParameters() {
		FuncParametersContext _localctx = new FuncParametersContext(Context, State);
		EnterRule(_localctx, 36, RULE_funcParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			_localctx._typedVarDecl = typedVarDecl();
			_localctx._Parameters.Add(_localctx._typedVarDecl);
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 172;
				Match(COMMA);
				State = 173;
				_localctx._typedVarDecl = typedVarDecl();
				_localctx._Paramters.Add(_localctx._typedVarDecl);
				}
				}
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncArgumentsContext : ParserRuleContext {
		public EqualityContext _equality;
		public IList<EqualityContext> _Args = new List<EqualityContext>();
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext[] equality() {
			return GetRuleContexts<EqualityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality(int i) {
			return GetRuleContext<EqualityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ZephyrParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ZephyrParser.COMMA, i);
		}
		public FuncArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterFuncArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitFuncArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncArgumentsContext funcArguments() {
		FuncArgumentsContext _localctx = new FuncArgumentsContext(Context, State);
		EnterRule(_localctx, 38, RULE_funcArguments);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			_localctx._equality = equality(0);
			_localctx._Args.Add(_localctx._equality);
			State = 184;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 180;
					Match(COMMA);
					State = 181;
					_localctx._equality = equality(0);
					_localctx._Args.Add(_localctx._equality);
					}
					} 
				}
				State = 186;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(ZephyrParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionallyTypedVarDeclContext optionallyTypedVarDecl() {
			return GetRuleContext<OptionallyTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ZephyrParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignExprContext assignExpr() {
			return GetRuleContext<AssignExprContext>(0);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 40, RULE_varDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			Match(LET);
			State = 188;
			optionallyTypedVarDecl();
			State = 191;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 189;
				Match(ASSIGN);
				State = 190;
				assignExpr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignExprContext : ParserRuleContext {
		public EqualityContext Lhs;
		public EqualityContext Rhs;
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext[] equality() {
			return GetRuleContexts<EqualityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality(int i) {
			return GetRuleContext<EqualityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ZephyrParser.ASSIGN, 0); }
		public AssignExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterAssignExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitAssignExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignExprContext assignExpr() {
		AssignExprContext _localctx = new AssignExprContext(Context, State);
		EnterRule(_localctx, 42, RULE_assignExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			_localctx.Lhs = equality(0);
			State = 196;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 194;
				Match(ASSIGN);
				State = 195;
				_localctx.Rhs = equality(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityContext : ParserRuleContext {
		public EqualityContext Left;
		public EqualityContext Expr;
		public EqualityContext Inner;
		public IToken Op;
		public EqualityContext Right;
		public EqualityContext Index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ZephyrParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ZephyrParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext[] equality() {
			return GetRuleContexts<EqualityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality(int i) {
			return GetRuleContext<EqualityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(ZephyrParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(ZephyrParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ZephyrParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ZephyrParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUAL() { return GetToken(ZephyrParser.GREATER_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(ZephyrParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUAL() { return GetToken(ZephyrParser.LESS_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(ZephyrParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ZephyrParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL() { return GetToken(ZephyrParser.NOT_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(ZephyrParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(ZephyrParser.RBRACKET, 0); }
		public EqualityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterEquality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitEquality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityContext equality() {
		return equality(0);
	}

	private EqualityContext equality(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityContext _localctx = new EqualityContext(Context, _parentState);
		EqualityContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_equality, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAR:
				{
				State = 199;
				Match(LPAR);
				State = 200;
				_localctx.Inner = equality(0);
				State = 201;
				Match(RPAR);
				}
				break;
			case STRING_LITERAL:
			case IF:
			case TRUE:
			case FALSE:
			case ID:
			case LBRACE:
			case PLUS:
			case MINUS:
			case NOT:
			case INT:
			case FLOAT:
			case LBRACKET:
				{
				State = 203;
				factor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 225;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 223;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						_localctx = new EqualityContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_equality);
						State = 206;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 207;
						_localctx.Op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DIVIDE || _la==MULTIPLY) ) {
							_localctx.Op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 208;
						_localctx.Right = equality(7);
						}
						break;
					case 2:
						{
						_localctx = new EqualityContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_equality);
						State = 209;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 210;
						_localctx.Op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							_localctx.Op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 211;
						_localctx.Right = equality(6);
						}
						break;
					case 3:
						{
						_localctx = new EqualityContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_equality);
						State = 212;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 213;
						_localctx.Op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 8053063680L) != 0) ) {
							_localctx.Op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 214;
						_localctx.Right = equality(5);
						}
						break;
					case 4:
						{
						_localctx = new EqualityContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_equality);
						State = 215;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 216;
						_localctx.Op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==EQUAL || _la==NOT_EQUAL) ) {
							_localctx.Op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 217;
						_localctx.Right = equality(4);
						}
						break;
					case 5:
						{
						_localctx = new EqualityContext(_parentctx, _parentState);
						_localctx.Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_equality);
						State = 218;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 219;
						Match(LBRACKET);
						State = 220;
						_localctx.Index = equality(0);
						State = 221;
						Match(RBRACKET);
						}
						break;
					}
					} 
				}
				State = 227;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		public EqualityContext _equality;
		public IList<EqualityContext> _Exprs = new List<EqualityContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(ZephyrParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(ZephyrParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext[] equality() {
			return GetRuleContexts<EqualityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality(int i) {
			return GetRuleContext<EqualityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ZephyrParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ZephyrParser.COMMA, i);
		}
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 46, RULE_arrayInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			Match(LBRACKET);
			State = 229;
			_localctx._equality = equality(0);
			_localctx._Exprs.Add(_localctx._equality);
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 230;
				Match(COMMA);
				State = 231;
				_localctx._equality = equality(0);
				_localctx._Exprs.Add(_localctx._equality);
				}
				}
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 237;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(ZephyrParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ZephyrParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(ZephyrParser.RBRACKET, 0); }
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 48, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			Match(LBRACKET);
			State = 240;
			Match(ID);
			State = 241;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaContext : ParserRuleContext {
		public OptionallyTypedVarDeclContext _optionallyTypedVarDecl;
		public IList<OptionallyTypedVarDeclContext> _Params = new List<OptionallyTypedVarDeclContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(ZephyrParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(ZephyrParser.PIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(ZephyrParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionallyTypedVarDeclContext[] optionallyTypedVarDecl() {
			return GetRuleContexts<OptionallyTypedVarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionallyTypedVarDeclContext optionallyTypedVarDecl(int i) {
			return GetRuleContext<OptionallyTypedVarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ZephyrParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ZephyrParser.COMMA, i);
		}
		public LambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaContext lambda() {
		LambdaContext _localctx = new LambdaContext(Context, State);
		EnterRule(_localctx, 50, RULE_lambda);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			Match(LBRACKET);
			State = 244;
			_localctx._optionallyTypedVarDecl = optionallyTypedVarDecl();
			_localctx._Params.Add(_localctx._optionallyTypedVarDecl);
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 245;
				Match(COMMA);
				State = 246;
				_localctx._optionallyTypedVarDecl = optionallyTypedVarDecl();
				_localctx._Params.Add(_localctx._optionallyTypedVarDecl);
				}
				}
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 252;
			Match(PIPE);
			State = 253;
			statement();
			State = 254;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ZephyrParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 52, RULE_type);
		try {
			State = 258;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 256;
				Match(ID);
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 257;
				arrayType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public IToken Op;
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ZephyrParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ZephyrParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(ZephyrParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 54, RULE_factor);
		int _la;
		try {
			State = 263;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 260;
				_localctx.Op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 163208757248L) != 0) ) {
					_localctx.Op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 261;
				factor();
				}
				break;
			case STRING_LITERAL:
			case IF:
			case TRUE:
			case FALSE:
			case ID:
			case LBRACE:
			case INT:
			case FLOAT:
			case LBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 262;
				call(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(ZephyrParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ZephyrParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ZephyrParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncArgumentsContext funcArguments() {
			return GetRuleContext<FuncArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ZephyrParser.SEMICOLON, 0); }
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		return call(0);
	}

	private CallContext call(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CallContext _localctx = new CallContext(Context, _parentState);
		CallContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_call, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 266;
			primary();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 280;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CallContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_call);
					State = 268;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 276;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case COLON:
						{
						{
						State = 269;
						Match(COLON);
						State = 270;
						funcArguments();
						State = 272;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
						case 1:
							{
							State = 271;
							Match(SEMICOLON);
							}
							break;
						}
						}
						}
						break;
					case NOT:
						{
						State = 274;
						Match(NOT);
						}
						break;
					case ID:
						{
						State = 275;
						Match(ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 282;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ZephyrParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundContext compound() {
			return GetRuleContext<CompoundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext lambda() {
			return GetRuleContext<LambdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 58, RULE_primary);
		try {
			State = 290;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 283;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 284;
				arrayInitializer();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 285;
				Match(ID);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 286;
				compound();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 287;
				ifStmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 288;
				lambda();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 289;
				@namespace();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public IToken StringLit;
		public IToken Int;
		public IToken Float;
		public IToken True;
		public IToken False;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ZephyrParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ZephyrParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(ZephyrParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(ZephyrParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(ZephyrParser.FALSE, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 60, RULE_literal);
		try {
			State = 297;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 292;
				_localctx.StringLit = Match(STRING_LITERAL);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 293;
				_localctx.Int = Match(INT);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 294;
				_localctx.Float = Match(FLOAT);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 295;
				_localctx.True = Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 296;
				_localctx.False = Match(FALSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 22: return equality_sempred((EqualityContext)_localctx, predIndex);
		case 28: return call_sempred((CallContext)_localctx, predIndex);
		}
		return true;
	}
	private bool equality_sempred(EqualityContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		}
		return true;
	}
	private bool call_sempred(CallContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,45,300,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,1,0,1,0,1,0,1,1,1,1,3,1,68,8,1,5,1,70,8,1,10,1,12,
		1,73,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,84,8,2,1,3,1,3,1,3,3,
		3,89,8,3,1,4,1,4,1,4,3,4,94,8,4,1,5,1,5,1,5,1,6,1,6,3,6,101,8,6,1,7,1,
		7,1,7,1,8,1,8,1,8,5,8,109,8,8,10,8,12,8,112,9,8,1,9,1,9,1,9,1,9,3,9,118,
		8,9,1,9,1,9,1,9,1,10,5,10,124,8,10,10,10,12,10,127,9,10,1,11,1,11,1,11,
		1,12,1,12,3,12,134,8,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,3,
		14,145,8,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,17,1,17,1,17,1,17,1,17,3,17,164,8,17,1,17,1,17,3,17,168,8,17,1,17,1,
		17,1,18,1,18,1,18,5,18,175,8,18,10,18,12,18,178,9,18,1,19,1,19,1,19,5,
		19,183,8,19,10,19,12,19,186,9,19,1,20,1,20,1,20,1,20,3,20,192,8,20,1,21,
		1,21,1,21,3,21,197,8,21,1,22,1,22,1,22,1,22,1,22,1,22,3,22,205,8,22,1,
		22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
		22,1,22,1,22,5,22,224,8,22,10,22,12,22,227,9,22,1,23,1,23,1,23,1,23,5,
		23,233,8,23,10,23,12,23,236,9,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,
		25,1,25,1,25,5,25,248,8,25,10,25,12,25,251,9,25,1,25,1,25,1,25,1,25,1,
		26,1,26,3,26,259,8,26,1,27,1,27,1,27,3,27,264,8,27,1,28,1,28,1,28,1,28,
		1,28,1,28,1,28,3,28,273,8,28,1,28,1,28,3,28,277,8,28,5,28,279,8,28,10,
		28,12,28,282,9,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,291,8,29,1,30,
		1,30,1,30,1,30,1,30,3,30,298,8,30,1,30,0,2,44,56,31,0,2,4,6,8,10,12,14,
		16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,0,
		5,1,0,35,36,1,0,33,34,1,0,29,32,1,0,27,28,2,0,33,34,37,37,318,0,62,1,0,
		0,0,2,71,1,0,0,0,4,83,1,0,0,0,6,88,1,0,0,0,8,93,1,0,0,0,10,95,1,0,0,0,
		12,98,1,0,0,0,14,102,1,0,0,0,16,105,1,0,0,0,18,113,1,0,0,0,20,125,1,0,
		0,0,22,128,1,0,0,0,24,131,1,0,0,0,26,135,1,0,0,0,28,139,1,0,0,0,30,146,
		1,0,0,0,32,150,1,0,0,0,34,158,1,0,0,0,36,171,1,0,0,0,38,179,1,0,0,0,40,
		187,1,0,0,0,42,193,1,0,0,0,44,204,1,0,0,0,46,228,1,0,0,0,48,239,1,0,0,
		0,50,243,1,0,0,0,52,258,1,0,0,0,54,263,1,0,0,0,56,265,1,0,0,0,58,290,1,
		0,0,0,60,297,1,0,0,0,62,63,3,2,1,0,63,64,5,0,0,1,64,1,1,0,0,0,65,67,3,
		4,2,0,66,68,5,20,0,0,67,66,1,0,0,0,67,68,1,0,0,0,68,70,1,0,0,0,69,65,1,
		0,0,0,70,73,1,0,0,0,71,69,1,0,0,0,71,72,1,0,0,0,72,3,1,0,0,0,73,71,1,0,
		0,0,74,84,3,6,3,0,75,84,3,22,11,0,76,84,3,24,12,0,77,84,3,26,13,0,78,84,
		3,28,14,0,79,84,3,30,15,0,80,84,3,32,16,0,81,84,3,42,21,0,82,84,3,14,7,
		0,83,74,1,0,0,0,83,75,1,0,0,0,83,76,1,0,0,0,83,77,1,0,0,0,83,78,1,0,0,
		0,83,79,1,0,0,0,83,80,1,0,0,0,83,81,1,0,0,0,83,82,1,0,0,0,84,5,1,0,0,0,
		85,89,3,18,9,0,86,89,3,34,17,0,87,89,3,40,20,0,88,85,1,0,0,0,88,86,1,0,
		0,0,88,87,1,0,0,0,89,7,1,0,0,0,90,94,3,34,17,0,91,94,3,10,5,0,92,94,3,
		18,9,0,93,90,1,0,0,0,93,91,1,0,0,0,93,92,1,0,0,0,94,9,1,0,0,0,95,96,5,
		18,0,0,96,97,3,52,26,0,97,11,1,0,0,0,98,100,5,18,0,0,99,101,3,52,26,0,
		100,99,1,0,0,0,100,101,1,0,0,0,101,13,1,0,0,0,102,103,5,17,0,0,103,104,
		3,16,8,0,104,15,1,0,0,0,105,110,5,18,0,0,106,107,5,23,0,0,107,109,5,18,
		0,0,108,106,1,0,0,0,109,112,1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,
		17,1,0,0,0,112,110,1,0,0,0,113,114,5,3,0,0,114,117,5,18,0,0,115,116,5,
		32,0,0,116,118,5,18,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,119,1,0,0,
		0,119,120,3,20,10,0,120,121,5,4,0,0,121,19,1,0,0,0,122,124,3,8,4,0,123,
		122,1,0,0,0,124,127,1,0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,126,21,1,0,
		0,0,127,125,1,0,0,0,128,129,5,5,0,0,129,130,3,44,22,0,130,23,1,0,0,0,131,
		133,5,6,0,0,132,134,3,44,22,0,133,132,1,0,0,0,133,134,1,0,0,0,134,25,1,
		0,0,0,135,136,5,24,0,0,136,137,3,2,1,0,137,138,5,25,0,0,138,27,1,0,0,0,
		139,140,5,7,0,0,140,141,3,44,22,0,141,144,3,4,2,0,142,143,5,8,0,0,143,
		145,3,4,2,0,144,142,1,0,0,0,144,145,1,0,0,0,145,29,1,0,0,0,146,147,5,9,
		0,0,147,148,3,44,22,0,148,149,3,4,2,0,149,31,1,0,0,0,150,151,5,10,0,0,
		151,152,3,40,20,0,152,153,5,22,0,0,153,154,3,44,22,0,154,155,5,22,0,0,
		155,156,3,42,21,0,156,157,3,4,2,0,157,33,1,0,0,0,158,159,5,13,0,0,159,
		163,5,18,0,0,160,161,5,21,0,0,161,164,3,36,18,0,162,164,5,37,0,0,163,160,
		1,0,0,0,163,162,1,0,0,0,164,167,1,0,0,0,165,166,5,19,0,0,166,168,3,52,
		26,0,167,165,1,0,0,0,167,168,1,0,0,0,168,169,1,0,0,0,169,170,3,4,2,0,170,
		35,1,0,0,0,171,176,3,10,5,0,172,173,5,22,0,0,173,175,3,10,5,0,174,172,
		1,0,0,0,175,178,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,37,1,0,0,0,
		178,176,1,0,0,0,179,184,3,44,22,0,180,181,5,22,0,0,181,183,3,44,22,0,182,
		180,1,0,0,0,183,186,1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,39,1,0,
		0,0,186,184,1,0,0,0,187,188,5,14,0,0,188,191,3,12,6,0,189,190,5,26,0,0,
		190,192,3,42,21,0,191,189,1,0,0,0,191,192,1,0,0,0,192,41,1,0,0,0,193,196,
		3,44,22,0,194,195,5,26,0,0,195,197,3,44,22,0,196,194,1,0,0,0,196,197,1,
		0,0,0,197,43,1,0,0,0,198,199,6,22,-1,0,199,200,5,38,0,0,200,201,3,44,22,
		0,201,202,5,39,0,0,202,205,1,0,0,0,203,205,3,54,27,0,204,198,1,0,0,0,204,
		203,1,0,0,0,205,225,1,0,0,0,206,207,10,6,0,0,207,208,7,0,0,0,208,224,3,
		44,22,7,209,210,10,5,0,0,210,211,7,1,0,0,211,224,3,44,22,6,212,213,10,
		4,0,0,213,214,7,2,0,0,214,224,3,44,22,5,215,216,10,3,0,0,216,217,7,3,0,
		0,217,224,3,44,22,4,218,219,10,2,0,0,219,220,5,42,0,0,220,221,3,44,22,
		0,221,222,5,43,0,0,222,224,1,0,0,0,223,206,1,0,0,0,223,209,1,0,0,0,223,
		212,1,0,0,0,223,215,1,0,0,0,223,218,1,0,0,0,224,227,1,0,0,0,225,223,1,
		0,0,0,225,226,1,0,0,0,226,45,1,0,0,0,227,225,1,0,0,0,228,229,5,42,0,0,
		229,234,3,44,22,0,230,231,5,22,0,0,231,233,3,44,22,0,232,230,1,0,0,0,233,
		236,1,0,0,0,234,232,1,0,0,0,234,235,1,0,0,0,235,237,1,0,0,0,236,234,1,
		0,0,0,237,238,5,43,0,0,238,47,1,0,0,0,239,240,5,42,0,0,240,241,5,18,0,
		0,241,242,5,43,0,0,242,49,1,0,0,0,243,244,5,42,0,0,244,249,3,12,6,0,245,
		246,5,22,0,0,246,248,3,12,6,0,247,245,1,0,0,0,248,251,1,0,0,0,249,247,
		1,0,0,0,249,250,1,0,0,0,250,252,1,0,0,0,251,249,1,0,0,0,252,253,5,44,0,
		0,253,254,3,4,2,0,254,255,5,43,0,0,255,51,1,0,0,0,256,259,5,18,0,0,257,
		259,3,48,24,0,258,256,1,0,0,0,258,257,1,0,0,0,259,53,1,0,0,0,260,261,7,
		4,0,0,261,264,3,54,27,0,262,264,3,56,28,0,263,260,1,0,0,0,263,262,1,0,
		0,0,264,55,1,0,0,0,265,266,6,28,-1,0,266,267,3,58,29,0,267,280,1,0,0,0,
		268,276,10,2,0,0,269,270,5,21,0,0,270,272,3,38,19,0,271,273,5,20,0,0,272,
		271,1,0,0,0,272,273,1,0,0,0,273,277,1,0,0,0,274,277,5,37,0,0,275,277,5,
		18,0,0,276,269,1,0,0,0,276,274,1,0,0,0,276,275,1,0,0,0,277,279,1,0,0,0,
		278,268,1,0,0,0,279,282,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,57,
		1,0,0,0,282,280,1,0,0,0,283,291,3,60,30,0,284,291,3,46,23,0,285,291,5,
		18,0,0,286,291,3,26,13,0,287,291,3,28,14,0,288,291,3,50,25,0,289,291,3,
		16,8,0,290,283,1,0,0,0,290,284,1,0,0,0,290,285,1,0,0,0,290,286,1,0,0,0,
		290,287,1,0,0,0,290,288,1,0,0,0,290,289,1,0,0,0,291,59,1,0,0,0,292,298,
		5,1,0,0,293,298,5,40,0,0,294,298,5,41,0,0,295,298,5,15,0,0,296,298,5,16,
		0,0,297,292,1,0,0,0,297,293,1,0,0,0,297,294,1,0,0,0,297,295,1,0,0,0,297,
		296,1,0,0,0,298,61,1,0,0,0,29,67,71,83,88,93,100,110,117,125,133,144,163,
		167,176,184,191,196,204,223,225,234,249,258,263,272,276,280,290,297
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
