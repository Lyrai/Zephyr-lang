//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ZephyrParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class ZephyrParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		STRING_LITERAL=1, WS=2, NEWLINE=3, COMMENT=4, CLASS=5, END=6, PRINT=7, 
		RETURN=8, IF=9, ELSE=10, WHILE=11, FOR=12, GET=13, SET=14, FN=15, LET=16, 
		TRUE=17, FALSE=18, USE=19, ID=20, ARROW=21, SEMICOLON=22, COLON=23, COMMA=24, 
		DOT=25, LBRACE=26, RBRACE=27, ASSIGN=28, EQUAL=29, NOT_EQUAL=30, GREATER_EQUAL=31, 
		GREATER=32, LESS_EQUAL=33, LESS=34, PLUS=35, MINUS=36, DIVIDE=37, MULTIPLY=38, 
		NOT=39, LPAR=40, RPAR=41, INT=42, FLOAT=43, LBRACKET=44, RBRACKET=45, 
		PIPE=46, DOUBLE_QUOTE=47;
	public const int
		RULE_program = 0, RULE_statementList = 1, RULE_statement = 2, RULE_decl = 3, 
		RULE_classBodyDecl = 4, RULE_typedVarDecl = 5, RULE_optionallyTypedVarDecl = 6, 
		RULE_useStmt = 7, RULE_namespace = 8, RULE_classDecl = 9, RULE_classBody = 10, 
		RULE_printStmt = 11, RULE_returnStmt = 12, RULE_compound = 13, RULE_ifStmt = 14, 
		RULE_whileStmt = 15, RULE_forStmt = 16, RULE_funcDecl = 17, RULE_funcParameters = 18, 
		RULE_funcArguments = 19, RULE_varDecl = 20, RULE_assignExpr = 21, RULE_equality = 22, 
		RULE_arrayInitializer = 23, RULE_arrayType = 24, RULE_lambda = 25, RULE_type = 26, 
		RULE_factor = 27, RULE_call = 28, RULE_primary = 29, RULE_literal = 30;
	public static readonly string[] ruleNames = {
		"program", "statementList", "statement", "decl", "classBodyDecl", "typedVarDecl", 
		"optionallyTypedVarDecl", "useStmt", "namespace", "classDecl", "classBody", 
		"printStmt", "returnStmt", "compound", "ifStmt", "whileStmt", "forStmt", 
		"funcDecl", "funcParameters", "funcArguments", "varDecl", "assignExpr", 
		"equality", "arrayInitializer", "arrayType", "lambda", "type", "factor", 
		"call", "primary", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'\\n'", null, "'class'", "'end'", "'print'", "'return'", 
		"'if'", "'else'", "'while'", "'for'", "'get'", "'set'", "'fn'", "'let'", 
		"'true'", "'false'", "'use'", null, "'->'", "';'", "':'", "','", "'.'", 
		"'{'", "'}'", "'='", "'=='", "'!='", "'>='", "'>'", "'<='", "'<'", "'+'", 
		"'-'", "'/'", "'*'", "'!'", "'('", "')'", null, null, "'['", "']'", "'|'", 
		"'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "STRING_LITERAL", "WS", "NEWLINE", "COMMENT", "CLASS", "END", "PRINT", 
		"RETURN", "IF", "ELSE", "WHILE", "FOR", "GET", "SET", "FN", "LET", "TRUE", 
		"FALSE", "USE", "ID", "ARROW", "SEMICOLON", "COLON", "COMMA", "DOT", "LBRACE", 
		"RBRACE", "ASSIGN", "EQUAL", "NOT_EQUAL", "GREATER_EQUAL", "GREATER", 
		"LESS_EQUAL", "LESS", "PLUS", "MINUS", "DIVIDE", "MULTIPLY", "NOT", "LPAR", 
		"RPAR", "INT", "FLOAT", "LBRACKET", "RBRACKET", "PIPE", "DOUBLE_QUOTE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ZephyrParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ZephyrParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ZephyrParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ZephyrParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ZephyrParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			statementList();
			State = 63;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(ZephyrParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(ZephyrParser.NEWLINE, i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 2, RULE_statementList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 32538741414826L) != 0) {
				{
				{
				State = 65;
				statement();
				State = 69;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 66;
						Match(NEWLINE);
						}
						} 
					}
					State = 71;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
				}
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext decl() {
			return GetRuleContext<DeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundContext compound() {
			return GetRuleContext<CompoundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStmtContext whileStmt() {
			return GetRuleContext<WhileStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStmtContext forStmt() {
			return GetRuleContext<ForStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignExprContext assignExpr() {
			return GetRuleContext<AssignExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseStmtContext useStmt() {
			return GetRuleContext<UseStmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 77;
				decl();
				}
				break;
			case 2:
				{
				State = 78;
				printStmt();
				}
				break;
			case 3:
				{
				State = 79;
				returnStmt();
				}
				break;
			case 4:
				{
				State = 80;
				compound();
				}
				break;
			case 5:
				{
				State = 81;
				ifStmt();
				}
				break;
			case 6:
				{
				State = 82;
				whileStmt();
				}
				break;
			case 7:
				{
				State = 83;
				forStmt();
				}
				break;
			case 8:
				{
				State = 84;
				assignExpr();
				}
				break;
			case 9:
				{
				State = 85;
				useStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl() {
			return GetRuleContext<ClassDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext funcDecl() {
			return GetRuleContext<FuncDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(ZephyrParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(ZephyrParser.NEWLINE, i);
		}
		public DeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclContext decl() {
		DeclContext _localctx = new DeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_decl);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLASS:
				{
				State = 88;
				classDecl();
				State = 92;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 89;
						Match(NEWLINE);
						}
						} 
					}
					State = 94;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				}
				}
				break;
			case FN:
				{
				State = 95;
				funcDecl();
				State = 99;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 96;
						Match(NEWLINE);
						}
						} 
					}
					State = 101;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				}
				}
				break;
			case LET:
				{
				State = 102;
				varDecl();
				State = 106;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 103;
						Match(NEWLINE);
						}
						} 
					}
					State = 108;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext funcDecl() {
			return GetRuleContext<FuncDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedVarDeclContext typedVarDecl() {
			return GetRuleContext<TypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl() {
			return GetRuleContext<ClassDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(ZephyrParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(ZephyrParser.NEWLINE, i);
		}
		public ClassBodyDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBodyDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterClassBodyDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitClassBodyDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBodyDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyDeclContext classBodyDecl() {
		ClassBodyDeclContext _localctx = new ClassBodyDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_classBodyDecl);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FN:
				{
				State = 111;
				funcDecl();
				State = 115;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 112;
						Match(NEWLINE);
						}
						} 
					}
					State = 117;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				}
				}
				break;
			case ID:
				{
				State = 118;
				typedVarDecl();
				State = 122;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 119;
						Match(NEWLINE);
						}
						} 
					}
					State = 124;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				}
				}
				break;
			case CLASS:
				{
				State = 125;
				classDecl();
				State = 129;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 126;
						Match(NEWLINE);
						}
						} 
					}
					State = 131;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedVarDeclContext : ParserRuleContext {
		public IToken Name;
		public TypeContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ZephyrParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterTypedVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitTypedVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedVarDeclContext typedVarDecl() {
		TypedVarDeclContext _localctx = new TypedVarDeclContext(Context, State);
		EnterRule(_localctx, 10, RULE_typedVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			_localctx.Name = Match(ID);
			State = 135;
			_localctx.Type = type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionallyTypedVarDeclContext : ParserRuleContext {
		public IToken Name;
		public TypeContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ZephyrParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public OptionallyTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionallyTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterOptionallyTypedVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitOptionallyTypedVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionallyTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionallyTypedVarDeclContext optionallyTypedVarDecl() {
		OptionallyTypedVarDeclContext _localctx = new OptionallyTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_optionallyTypedVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			_localctx.Name = Match(ID);
			State = 139;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 138;
				_localctx.Type = type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseStmtContext : ParserRuleContext {
		public NamespaceContext Namespace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(ZephyrParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		public UseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterUseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitUseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseStmtContext useStmt() {
		UseStmtContext _localctx = new UseStmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_useStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(USE);
			State = 142;
			_localctx.Namespace = @namespace();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(ZephyrParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(ZephyrParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(ZephyrParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(ZephyrParser.DOT, i);
		}
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 16, RULE_namespace);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(ID);
			State = 149;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 145;
					Match(DOT);
					State = 146;
					Match(ID);
					}
					} 
				}
				State = 151;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		public IToken Name;
		public IToken Base;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(ZephyrParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ZephyrParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(ZephyrParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(ZephyrParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(ZephyrParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(ZephyrParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(ZephyrParser.LESS, 0); }
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 18, RULE_classDecl);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			Match(CLASS);
			State = 153;
			_localctx.Name = Match(ID);
			State = 157;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 154;
					Match(NEWLINE);
					}
					} 
				}
				State = 159;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LESS) {
				{
				State = 160;
				Match(LESS);
				State = 161;
				_localctx.Base = Match(ID);
				}
			}

			State = 167;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 164;
					Match(NEWLINE);
					}
					} 
				}
				State = 169;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			State = 170;
			classBody();
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINE) {
				{
				{
				State = 171;
				Match(NEWLINE);
				}
				}
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 177;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyDeclContext[] classBodyDecl() {
			return GetRuleContexts<ClassBodyDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyDeclContext classBodyDecl(int i) {
			return GetRuleContext<ClassBodyDeclContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 20, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 1081376L) != 0) {
				{
				{
				State = 179;
				classBodyDecl();
				}
				}
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(ZephyrParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(ZephyrParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(ZephyrParser.NEWLINE, i);
		}
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_printStmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			Match(PRINT);
			State = 189;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 186;
					Match(NEWLINE);
					}
					} 
				}
				State = 191;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			State = 192;
			equality(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ZephyrParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(ZephyrParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(ZephyrParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 24, RULE_returnStmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			Match(RETURN);
			State = 198;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 195;
					Match(NEWLINE);
					}
					} 
				}
				State = 200;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			State = 202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 201;
				equality(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ZephyrParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ZephyrParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(ZephyrParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(ZephyrParser.NEWLINE, i);
		}
		public CompoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterCompound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitCompound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundContext compound() {
		CompoundContext _localctx = new CompoundContext(Context, State);
		EnterRule(_localctx, 26, RULE_compound);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			Match(LBRACE);
			State = 208;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 205;
					Match(NEWLINE);
					}
					} 
				}
				State = 210;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			State = 211;
			statementList();
			State = 212;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public EqualityContext Condition;
		public StatementContext ThenBranch;
		public StatementContext ElseBranch;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ZephyrParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(ZephyrParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(ZephyrParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ZephyrParser.ELSE, 0); }
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_ifStmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(IF);
			State = 215;
			_localctx.Condition = equality(0);
			State = 219;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 216;
					Match(NEWLINE);
					}
					} 
				}
				State = 221;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			State = 222;
			_localctx.ThenBranch = statement();
			State = 225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 223;
				Match(ELSE);
				State = 224;
				_localctx.ElseBranch = statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStmtContext : ParserRuleContext {
		public EqualityContext Condition;
		public StatementContext Body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(ZephyrParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(ZephyrParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(ZephyrParser.NEWLINE, i);
		}
		public WhileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterWhileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitWhileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStmtContext whileStmt() {
		WhileStmtContext _localctx = new WhileStmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_whileStmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			Match(WHILE);
			State = 228;
			_localctx.Condition = equality(0);
			State = 232;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 229;
					Match(NEWLINE);
					}
					} 
				}
				State = 234;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			State = 235;
			_localctx.Body = statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStmtContext : ParserRuleContext {
		public VarDeclContext Initializer;
		public EqualityContext Condition;
		public AssignExprContext PostAction;
		public StatementContext Body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(ZephyrParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ZephyrParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ZephyrParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignExprContext assignExpr() {
			return GetRuleContext<AssignExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(ZephyrParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(ZephyrParser.NEWLINE, i);
		}
		public ForStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterForStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitForStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStmtContext forStmt() {
		ForStmtContext _localctx = new ForStmtContext(Context, State);
		EnterRule(_localctx, 32, RULE_forStmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(FOR);
			State = 238;
			_localctx.Initializer = varDecl();
			State = 239;
			Match(COMMA);
			State = 240;
			_localctx.Condition = equality(0);
			State = 241;
			Match(COMMA);
			State = 242;
			_localctx.PostAction = assignExpr();
			State = 246;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 243;
					Match(NEWLINE);
					}
					} 
				}
				State = 248;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			State = 249;
			_localctx.Body = statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclContext : ParserRuleContext {
		public IToken Name;
		public TypeContext Type;
		public StatementContext Body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FN() { return GetToken(ZephyrParser.FN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ZephyrParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ZephyrParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncParametersContext funcParameters() {
			return GetRuleContext<FuncParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(ZephyrParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(ZephyrParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FuncDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclContext funcDecl() {
		FuncDeclContext _localctx = new FuncDeclContext(Context, State);
		EnterRule(_localctx, 34, RULE_funcDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			Match(FN);
			State = 252;
			_localctx.Name = Match(ID);
			State = 256;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				State = 253;
				Match(COLON);
				State = 254;
				funcParameters();
				}
				break;
			case NOT:
				{
				State = 255;
				Match(NOT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARROW) {
				{
				State = 258;
				Match(ARROW);
				State = 259;
				_localctx.Type = type();
				}
			}

			State = 262;
			_localctx.Body = statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncParametersContext : ParserRuleContext {
		public TypedVarDeclContext _typedVarDecl;
		public IList<TypedVarDeclContext> _Parameters = new List<TypedVarDeclContext>();
		public IList<TypedVarDeclContext> _Paramters = new List<TypedVarDeclContext>();
		[System.Diagnostics.DebuggerNonUserCode] public TypedVarDeclContext[] typedVarDecl() {
			return GetRuleContexts<TypedVarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedVarDeclContext typedVarDecl(int i) {
			return GetRuleContext<TypedVarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ZephyrParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ZephyrParser.COMMA, i);
		}
		public FuncParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterFuncParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitFuncParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncParametersContext funcParameters() {
		FuncParametersContext _localctx = new FuncParametersContext(Context, State);
		EnterRule(_localctx, 36, RULE_funcParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			_localctx._typedVarDecl = typedVarDecl();
			_localctx._Parameters.Add(_localctx._typedVarDecl);
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 265;
				Match(COMMA);
				State = 266;
				_localctx._typedVarDecl = typedVarDecl();
				_localctx._Paramters.Add(_localctx._typedVarDecl);
				}
				}
				State = 271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncArgumentsContext : ParserRuleContext {
		public FactorContext _factor;
		public IList<FactorContext> _Args = new List<FactorContext>();
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ZephyrParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ZephyrParser.COMMA, i);
		}
		public FuncArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterFuncArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitFuncArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncArgumentsContext funcArguments() {
		FuncArgumentsContext _localctx = new FuncArgumentsContext(Context, State);
		EnterRule(_localctx, 38, RULE_funcArguments);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			_localctx._factor = factor();
			_localctx._Args.Add(_localctx._factor);
			State = 277;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 273;
					Match(COMMA);
					State = 274;
					_localctx._factor = factor();
					_localctx._Args.Add(_localctx._factor);
					}
					} 
				}
				State = 279;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(ZephyrParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionallyTypedVarDeclContext optionallyTypedVarDecl() {
			return GetRuleContext<OptionallyTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ZephyrParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 40, RULE_varDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			Match(LET);
			State = 281;
			optionallyTypedVarDecl();
			State = 284;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 282;
				Match(ASSIGN);
				State = 283;
				equality(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignExprContext : ParserRuleContext {
		public EqualityContext Lhs;
		public EqualityContext Rhs;
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext[] equality() {
			return GetRuleContexts<EqualityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality(int i) {
			return GetRuleContext<EqualityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ZephyrParser.ASSIGN, 0); }
		public AssignExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterAssignExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitAssignExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignExprContext assignExpr() {
		AssignExprContext _localctx = new AssignExprContext(Context, State);
		EnterRule(_localctx, 42, RULE_assignExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			_localctx.Lhs = equality(0);
			State = 289;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 287;
				Match(ASSIGN);
				State = 288;
				_localctx.Rhs = equality(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityContext : ParserRuleContext {
		public EqualityContext Expr;
		public EqualityContext Caller;
		public EqualityContext Left;
		public EqualityContext Equality;
		public IToken Callee;
		public CallContext Call;
		public IToken Op;
		public EqualityContext Right;
		public EqualityContext Index;
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext[] equality() {
			return GetRuleContexts<EqualityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality(int i) {
			return GetRuleContext<EqualityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(ZephyrParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(ZephyrParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ZephyrParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(ZephyrParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(ZephyrParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ZephyrParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ZephyrParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUAL() { return GetToken(ZephyrParser.GREATER_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(ZephyrParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUAL() { return GetToken(ZephyrParser.LESS_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(ZephyrParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ZephyrParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL() { return GetToken(ZephyrParser.NOT_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(ZephyrParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(ZephyrParser.RBRACKET, 0); }
		public EqualityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterEquality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitEquality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityContext equality() {
		return equality(0);
	}

	private EqualityContext equality(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityContext _localctx = new EqualityContext(Context, _parentState);
		EqualityContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_equality, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 293;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 292;
						Match(NEWLINE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 295;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 297;
				_localctx.Equality = equality(9);
				}
				break;
			case 2:
				{
				State = 298;
				_localctx.Callee = Match(ID);
				State = 299;
				_localctx.Call = call();
				}
				break;
			case 3:
				{
				State = 300;
				factor();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 327;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 325;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
					case 1:
						{
						_localctx = new EqualityContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_equality);
						State = 303;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 304;
						_localctx.Op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DIVIDE || _la==MULTIPLY) ) {
							_localctx.Op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 305;
						_localctx.Right = equality(6);
						}
						break;
					case 2:
						{
						_localctx = new EqualityContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_equality);
						State = 306;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 307;
						_localctx.Op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							_localctx.Op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 308;
						_localctx.Right = equality(5);
						}
						break;
					case 3:
						{
						_localctx = new EqualityContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_equality);
						State = 309;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 310;
						_localctx.Op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 32212254720L) != 0) ) {
							_localctx.Op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 311;
						_localctx.Right = equality(4);
						}
						break;
					case 4:
						{
						_localctx = new EqualityContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_equality);
						State = 312;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 313;
						_localctx.Op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==EQUAL || _la==NOT_EQUAL) ) {
							_localctx.Op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 314;
						_localctx.Right = equality(3);
						}
						break;
					case 5:
						{
						_localctx = new EqualityContext(_parentctx, _parentState);
						_localctx.Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_equality);
						State = 315;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 316;
						Match(LBRACKET);
						State = 317;
						_localctx.Index = equality(0);
						State = 318;
						Match(RBRACKET);
						}
						break;
					case 6:
						{
						_localctx = new EqualityContext(_parentctx, _parentState);
						_localctx.Caller = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_equality);
						State = 320;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 321;
						_localctx.Callee = Match(ID);
						State = 323;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
						case 1:
							{
							State = 322;
							_localctx.Call = call();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 329;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		public EqualityContext _equality;
		public IList<EqualityContext> _Exprs = new List<EqualityContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(ZephyrParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(ZephyrParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext[] equality() {
			return GetRuleContexts<EqualityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality(int i) {
			return GetRuleContext<EqualityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ZephyrParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ZephyrParser.COMMA, i);
		}
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 46, RULE_arrayInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			Match(LBRACKET);
			State = 331;
			_localctx._equality = equality(0);
			_localctx._Exprs.Add(_localctx._equality);
			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 332;
				Match(COMMA);
				State = 333;
				_localctx._equality = equality(0);
				_localctx._Exprs.Add(_localctx._equality);
				}
				}
				State = 338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 339;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(ZephyrParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ZephyrParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(ZephyrParser.RBRACKET, 0); }
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 48, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			Match(LBRACKET);
			State = 342;
			Match(ID);
			State = 343;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaContext : ParserRuleContext {
		public OptionallyTypedVarDeclContext _optionallyTypedVarDecl;
		public IList<OptionallyTypedVarDeclContext> _Params = new List<OptionallyTypedVarDeclContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(ZephyrParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(ZephyrParser.PIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(ZephyrParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionallyTypedVarDeclContext[] optionallyTypedVarDecl() {
			return GetRuleContexts<OptionallyTypedVarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionallyTypedVarDeclContext optionallyTypedVarDecl(int i) {
			return GetRuleContext<OptionallyTypedVarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ZephyrParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ZephyrParser.COMMA, i);
		}
		public LambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaContext lambda() {
		LambdaContext _localctx = new LambdaContext(Context, State);
		EnterRule(_localctx, 50, RULE_lambda);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			Match(LBRACKET);
			State = 346;
			_localctx._optionallyTypedVarDecl = optionallyTypedVarDecl();
			_localctx._Params.Add(_localctx._optionallyTypedVarDecl);
			State = 351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 347;
				Match(COMMA);
				State = 348;
				_localctx._optionallyTypedVarDecl = optionallyTypedVarDecl();
				_localctx._Params.Add(_localctx._optionallyTypedVarDecl);
				}
				}
				State = 353;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 354;
			Match(PIPE);
			State = 355;
			statement();
			State = 356;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ZephyrParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 52, RULE_type);
		try {
			State = 360;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 358;
				Match(ID);
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 359;
				arrayType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public IToken Op;
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ZephyrParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ZephyrParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(ZephyrParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 54, RULE_factor);
		int _la;
		try {
			State = 365;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 362;
				_localctx.Op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 652835028992L) != 0) ) {
					_localctx.Op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 363;
				factor();
				}
				break;
			case STRING_LITERAL:
			case IF:
			case TRUE:
			case FALSE:
			case ID:
			case LBRACE:
			case LPAR:
			case INT:
			case FLOAT:
			case LBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 364;
				primary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ZephyrParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncArgumentsContext funcArguments() {
			return GetRuleContext<FuncArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ZephyrParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(ZephyrParser.NOT, 0); }
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 56, RULE_call);
		try {
			State = 373;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 367;
				Match(COLON);
				State = 368;
				funcArguments();
				State = 370;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
				case 1:
					{
					State = 369;
					Match(SEMICOLON);
					}
					break;
				}
				}
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 372;
				Match(NOT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public EqualityContext Inner;
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ZephyrParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundContext compound() {
			return GetRuleContext<CompoundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext lambda() {
			return GetRuleContext<LambdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(ZephyrParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(ZephyrParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 58, RULE_primary);
		try {
			State = 386;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 375;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 376;
				arrayInitializer();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 377;
				Match(ID);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 378;
				compound();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 379;
				ifStmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 380;
				lambda();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 381;
				@namespace();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 382;
				Match(LPAR);
				State = 383;
				_localctx.Inner = equality(0);
				State = 384;
				Match(RPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public IToken StringLit;
		public IToken Int;
		public IToken Float;
		public IToken True;
		public IToken False;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ZephyrParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ZephyrParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(ZephyrParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(ZephyrParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(ZephyrParser.FALSE, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IZephyrParserListener typedListener = listener as IZephyrParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZephyrParserVisitor<TResult> typedVisitor = visitor as IZephyrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 60, RULE_literal);
		try {
			State = 393;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 388;
				_localctx.StringLit = Match(STRING_LITERAL);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 389;
				_localctx.Int = Match(INT);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 390;
				_localctx.Float = Match(FLOAT);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 391;
				_localctx.True = Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 392;
				_localctx.False = Match(FALSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 22: return equality_sempred((EqualityContext)_localctx, predIndex);
		}
		return true;
	}
	private bool equality_sempred(EqualityContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 8);
		case 5: return Precpred(Context, 7);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,47,396,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,1,0,1,0,1,0,1,1,1,1,5,1,68,8,1,10,1,12,1,71,9,1,5,
		1,73,8,1,10,1,12,1,76,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,87,8,
		2,1,3,1,3,5,3,91,8,3,10,3,12,3,94,9,3,1,3,1,3,5,3,98,8,3,10,3,12,3,101,
		9,3,1,3,1,3,5,3,105,8,3,10,3,12,3,108,9,3,3,3,110,8,3,1,4,1,4,5,4,114,
		8,4,10,4,12,4,117,9,4,1,4,1,4,5,4,121,8,4,10,4,12,4,124,9,4,1,4,1,4,5,
		4,128,8,4,10,4,12,4,131,9,4,3,4,133,8,4,1,5,1,5,1,5,1,6,1,6,3,6,140,8,
		6,1,7,1,7,1,7,1,8,1,8,1,8,5,8,148,8,8,10,8,12,8,151,9,8,1,9,1,9,1,9,5,
		9,156,8,9,10,9,12,9,159,9,9,1,9,1,9,3,9,163,8,9,1,9,5,9,166,8,9,10,9,12,
		9,169,9,9,1,9,1,9,5,9,173,8,9,10,9,12,9,176,9,9,1,9,1,9,1,10,5,10,181,
		8,10,10,10,12,10,184,9,10,1,11,1,11,5,11,188,8,11,10,11,12,11,191,9,11,
		1,11,1,11,1,12,1,12,5,12,197,8,12,10,12,12,12,200,9,12,1,12,3,12,203,8,
		12,1,13,1,13,5,13,207,8,13,10,13,12,13,210,9,13,1,13,1,13,1,13,1,14,1,
		14,1,14,5,14,218,8,14,10,14,12,14,221,9,14,1,14,1,14,1,14,3,14,226,8,14,
		1,15,1,15,1,15,5,15,231,8,15,10,15,12,15,234,9,15,1,15,1,15,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,5,16,245,8,16,10,16,12,16,248,9,16,1,16,1,16,
		1,17,1,17,1,17,1,17,1,17,3,17,257,8,17,1,17,1,17,3,17,261,8,17,1,17,1,
		17,1,18,1,18,1,18,5,18,268,8,18,10,18,12,18,271,9,18,1,19,1,19,1,19,5,
		19,276,8,19,10,19,12,19,279,9,19,1,20,1,20,1,20,1,20,3,20,285,8,20,1,21,
		1,21,1,21,3,21,290,8,21,1,22,1,22,4,22,294,8,22,11,22,12,22,295,1,22,1,
		22,1,22,1,22,3,22,302,8,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,324,8,22,5,
		22,326,8,22,10,22,12,22,329,9,22,1,23,1,23,1,23,1,23,5,23,335,8,23,10,
		23,12,23,338,9,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,5,
		25,350,8,25,10,25,12,25,353,9,25,1,25,1,25,1,25,1,25,1,26,1,26,3,26,361,
		8,26,1,27,1,27,1,27,3,27,366,8,27,1,28,1,28,1,28,3,28,371,8,28,1,28,3,
		28,374,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,
		387,8,29,1,30,1,30,1,30,1,30,1,30,3,30,394,8,30,1,30,0,1,44,31,0,2,4,6,
		8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
		56,58,60,0,5,1,0,37,38,1,0,35,36,1,0,31,34,1,0,29,30,2,0,35,36,39,39,432,
		0,62,1,0,0,0,2,74,1,0,0,0,4,86,1,0,0,0,6,109,1,0,0,0,8,132,1,0,0,0,10,
		134,1,0,0,0,12,137,1,0,0,0,14,141,1,0,0,0,16,144,1,0,0,0,18,152,1,0,0,
		0,20,182,1,0,0,0,22,185,1,0,0,0,24,194,1,0,0,0,26,204,1,0,0,0,28,214,1,
		0,0,0,30,227,1,0,0,0,32,237,1,0,0,0,34,251,1,0,0,0,36,264,1,0,0,0,38,272,
		1,0,0,0,40,280,1,0,0,0,42,286,1,0,0,0,44,301,1,0,0,0,46,330,1,0,0,0,48,
		341,1,0,0,0,50,345,1,0,0,0,52,360,1,0,0,0,54,365,1,0,0,0,56,373,1,0,0,
		0,58,386,1,0,0,0,60,393,1,0,0,0,62,63,3,2,1,0,63,64,5,0,0,1,64,1,1,0,0,
		0,65,69,3,4,2,0,66,68,5,3,0,0,67,66,1,0,0,0,68,71,1,0,0,0,69,67,1,0,0,
		0,69,70,1,0,0,0,70,73,1,0,0,0,71,69,1,0,0,0,72,65,1,0,0,0,73,76,1,0,0,
		0,74,72,1,0,0,0,74,75,1,0,0,0,75,3,1,0,0,0,76,74,1,0,0,0,77,87,3,6,3,0,
		78,87,3,22,11,0,79,87,3,24,12,0,80,87,3,26,13,0,81,87,3,28,14,0,82,87,
		3,30,15,0,83,87,3,32,16,0,84,87,3,42,21,0,85,87,3,14,7,0,86,77,1,0,0,0,
		86,78,1,0,0,0,86,79,1,0,0,0,86,80,1,0,0,0,86,81,1,0,0,0,86,82,1,0,0,0,
		86,83,1,0,0,0,86,84,1,0,0,0,86,85,1,0,0,0,87,5,1,0,0,0,88,92,3,18,9,0,
		89,91,5,3,0,0,90,89,1,0,0,0,91,94,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,
		93,110,1,0,0,0,94,92,1,0,0,0,95,99,3,34,17,0,96,98,5,3,0,0,97,96,1,0,0,
		0,98,101,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,110,1,0,0,0,101,99,1,
		0,0,0,102,106,3,40,20,0,103,105,5,3,0,0,104,103,1,0,0,0,105,108,1,0,0,
		0,106,104,1,0,0,0,106,107,1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,109,
		88,1,0,0,0,109,95,1,0,0,0,109,102,1,0,0,0,110,7,1,0,0,0,111,115,3,34,17,
		0,112,114,5,3,0,0,113,112,1,0,0,0,114,117,1,0,0,0,115,113,1,0,0,0,115,
		116,1,0,0,0,116,133,1,0,0,0,117,115,1,0,0,0,118,122,3,10,5,0,119,121,5,
		3,0,0,120,119,1,0,0,0,121,124,1,0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,
		123,133,1,0,0,0,124,122,1,0,0,0,125,129,3,18,9,0,126,128,5,3,0,0,127,126,
		1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,133,1,0,0,
		0,131,129,1,0,0,0,132,111,1,0,0,0,132,118,1,0,0,0,132,125,1,0,0,0,133,
		9,1,0,0,0,134,135,5,20,0,0,135,136,3,52,26,0,136,11,1,0,0,0,137,139,5,
		20,0,0,138,140,3,52,26,0,139,138,1,0,0,0,139,140,1,0,0,0,140,13,1,0,0,
		0,141,142,5,19,0,0,142,143,3,16,8,0,143,15,1,0,0,0,144,149,5,20,0,0,145,
		146,5,25,0,0,146,148,5,20,0,0,147,145,1,0,0,0,148,151,1,0,0,0,149,147,
		1,0,0,0,149,150,1,0,0,0,150,17,1,0,0,0,151,149,1,0,0,0,152,153,5,5,0,0,
		153,157,5,20,0,0,154,156,5,3,0,0,155,154,1,0,0,0,156,159,1,0,0,0,157,155,
		1,0,0,0,157,158,1,0,0,0,158,162,1,0,0,0,159,157,1,0,0,0,160,161,5,34,0,
		0,161,163,5,20,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,167,1,0,0,0,164,
		166,5,3,0,0,165,164,1,0,0,0,166,169,1,0,0,0,167,165,1,0,0,0,167,168,1,
		0,0,0,168,170,1,0,0,0,169,167,1,0,0,0,170,174,3,20,10,0,171,173,5,3,0,
		0,172,171,1,0,0,0,173,176,1,0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,
		177,1,0,0,0,176,174,1,0,0,0,177,178,5,6,0,0,178,19,1,0,0,0,179,181,3,8,
		4,0,180,179,1,0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,
		21,1,0,0,0,184,182,1,0,0,0,185,189,5,7,0,0,186,188,5,3,0,0,187,186,1,0,
		0,0,188,191,1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,192,1,0,0,0,191,
		189,1,0,0,0,192,193,3,44,22,0,193,23,1,0,0,0,194,198,5,8,0,0,195,197,5,
		3,0,0,196,195,1,0,0,0,197,200,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,
		199,202,1,0,0,0,200,198,1,0,0,0,201,203,3,44,22,0,202,201,1,0,0,0,202,
		203,1,0,0,0,203,25,1,0,0,0,204,208,5,26,0,0,205,207,5,3,0,0,206,205,1,
		0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,211,1,0,0,0,
		210,208,1,0,0,0,211,212,3,2,1,0,212,213,5,27,0,0,213,27,1,0,0,0,214,215,
		5,9,0,0,215,219,3,44,22,0,216,218,5,3,0,0,217,216,1,0,0,0,218,221,1,0,
		0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,222,1,0,0,0,221,219,1,0,0,0,222,
		225,3,4,2,0,223,224,5,10,0,0,224,226,3,4,2,0,225,223,1,0,0,0,225,226,1,
		0,0,0,226,29,1,0,0,0,227,228,5,11,0,0,228,232,3,44,22,0,229,231,5,3,0,
		0,230,229,1,0,0,0,231,234,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,
		235,1,0,0,0,234,232,1,0,0,0,235,236,3,4,2,0,236,31,1,0,0,0,237,238,5,12,
		0,0,238,239,3,40,20,0,239,240,5,24,0,0,240,241,3,44,22,0,241,242,5,24,
		0,0,242,246,3,42,21,0,243,245,5,3,0,0,244,243,1,0,0,0,245,248,1,0,0,0,
		246,244,1,0,0,0,246,247,1,0,0,0,247,249,1,0,0,0,248,246,1,0,0,0,249,250,
		3,4,2,0,250,33,1,0,0,0,251,252,5,15,0,0,252,256,5,20,0,0,253,254,5,23,
		0,0,254,257,3,36,18,0,255,257,5,39,0,0,256,253,1,0,0,0,256,255,1,0,0,0,
		257,260,1,0,0,0,258,259,5,21,0,0,259,261,3,52,26,0,260,258,1,0,0,0,260,
		261,1,0,0,0,261,262,1,0,0,0,262,263,3,4,2,0,263,35,1,0,0,0,264,269,3,10,
		5,0,265,266,5,24,0,0,266,268,3,10,5,0,267,265,1,0,0,0,268,271,1,0,0,0,
		269,267,1,0,0,0,269,270,1,0,0,0,270,37,1,0,0,0,271,269,1,0,0,0,272,277,
		3,54,27,0,273,274,5,24,0,0,274,276,3,54,27,0,275,273,1,0,0,0,276,279,1,
		0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,39,1,0,0,0,279,277,1,0,0,0,280,
		281,5,16,0,0,281,284,3,12,6,0,282,283,5,28,0,0,283,285,3,44,22,0,284,282,
		1,0,0,0,284,285,1,0,0,0,285,41,1,0,0,0,286,289,3,44,22,0,287,288,5,28,
		0,0,288,290,3,44,22,0,289,287,1,0,0,0,289,290,1,0,0,0,290,43,1,0,0,0,291,
		293,6,22,-1,0,292,294,5,3,0,0,293,292,1,0,0,0,294,295,1,0,0,0,295,293,
		1,0,0,0,295,296,1,0,0,0,296,297,1,0,0,0,297,302,3,44,22,9,298,299,5,20,
		0,0,299,302,3,56,28,0,300,302,3,54,27,0,301,291,1,0,0,0,301,298,1,0,0,
		0,301,300,1,0,0,0,302,327,1,0,0,0,303,304,10,5,0,0,304,305,7,0,0,0,305,
		326,3,44,22,6,306,307,10,4,0,0,307,308,7,1,0,0,308,326,3,44,22,5,309,310,
		10,3,0,0,310,311,7,2,0,0,311,326,3,44,22,4,312,313,10,2,0,0,313,314,7,
		3,0,0,314,326,3,44,22,3,315,316,10,8,0,0,316,317,5,44,0,0,317,318,3,44,
		22,0,318,319,5,45,0,0,319,326,1,0,0,0,320,321,10,7,0,0,321,323,5,20,0,
		0,322,324,3,56,28,0,323,322,1,0,0,0,323,324,1,0,0,0,324,326,1,0,0,0,325,
		303,1,0,0,0,325,306,1,0,0,0,325,309,1,0,0,0,325,312,1,0,0,0,325,315,1,
		0,0,0,325,320,1,0,0,0,326,329,1,0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,
		328,45,1,0,0,0,329,327,1,0,0,0,330,331,5,44,0,0,331,336,3,44,22,0,332,
		333,5,24,0,0,333,335,3,44,22,0,334,332,1,0,0,0,335,338,1,0,0,0,336,334,
		1,0,0,0,336,337,1,0,0,0,337,339,1,0,0,0,338,336,1,0,0,0,339,340,5,45,0,
		0,340,47,1,0,0,0,341,342,5,44,0,0,342,343,5,20,0,0,343,344,5,45,0,0,344,
		49,1,0,0,0,345,346,5,44,0,0,346,351,3,12,6,0,347,348,5,24,0,0,348,350,
		3,12,6,0,349,347,1,0,0,0,350,353,1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,
		0,352,354,1,0,0,0,353,351,1,0,0,0,354,355,5,46,0,0,355,356,3,4,2,0,356,
		357,5,45,0,0,357,51,1,0,0,0,358,361,5,20,0,0,359,361,3,48,24,0,360,358,
		1,0,0,0,360,359,1,0,0,0,361,53,1,0,0,0,362,363,7,4,0,0,363,366,3,54,27,
		0,364,366,3,58,29,0,365,362,1,0,0,0,365,364,1,0,0,0,366,55,1,0,0,0,367,
		368,5,23,0,0,368,370,3,38,19,0,369,371,5,22,0,0,370,369,1,0,0,0,370,371,
		1,0,0,0,371,374,1,0,0,0,372,374,5,39,0,0,373,367,1,0,0,0,373,372,1,0,0,
		0,374,57,1,0,0,0,375,387,3,60,30,0,376,387,3,46,23,0,377,387,5,20,0,0,
		378,387,3,26,13,0,379,387,3,28,14,0,380,387,3,50,25,0,381,387,3,16,8,0,
		382,383,5,40,0,0,383,384,3,44,22,0,384,385,5,41,0,0,385,387,1,0,0,0,386,
		375,1,0,0,0,386,376,1,0,0,0,386,377,1,0,0,0,386,378,1,0,0,0,386,379,1,
		0,0,0,386,380,1,0,0,0,386,381,1,0,0,0,386,382,1,0,0,0,387,59,1,0,0,0,388,
		394,5,1,0,0,389,394,5,42,0,0,390,394,5,43,0,0,391,394,5,17,0,0,392,394,
		5,18,0,0,393,388,1,0,0,0,393,389,1,0,0,0,393,390,1,0,0,0,393,391,1,0,0,
		0,393,392,1,0,0,0,394,61,1,0,0,0,45,69,74,86,92,99,106,109,115,122,129,
		132,139,149,157,162,167,174,182,189,198,202,208,219,225,232,246,256,260,
		269,277,284,289,295,301,323,325,327,336,351,360,365,370,373,386,393
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
